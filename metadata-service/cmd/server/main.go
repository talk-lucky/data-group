package main

import (
	"log"
	"os"

	"github.com/gin-gonic/gin"
	"github.com/joho/godotenv"
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"

	"metadata-service/internal/database"
	"metadata-service/internal/handlers" // Import handlers
	// docs is generated by Swag CLI, you have to import it.
	_ "metadata-service/docs"
)

// @title Metadata Service API
// @version 1.0
// @description This is a sample server for a metadata service.
// @termsOfService http://swagger.io/terms/

// @contact.name API Support
// @contact.url http://www.swagger.io/support
// @contact.email support@swagger.io

// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html

// @host localhost:8080
// @BasePath /api/v1
// @schemes http https

func main() {
	// Load .env file if it exists
	if err := godotenv.Load(); err != nil {
		log.Println("No .env file found, using environment variables from OS or Docker")
	}

	// Initialize database connection
	database.ConnectDatabase()

	// Initialize Gin router
	router := gin.Default()

	// API v1 group
	v1 := router.Group("/api/v1")
	{
		entityRoutes := v1.Group("/entities")
		{
			entityRoutes.POST("/", handlers.CreateEntity)
			entityRoutes.GET("/", handlers.ListEntities)
			entityRoutes.GET("/:id", handlers.GetEntity)
			entityRoutes.PUT("/:id", handlers.UpdateEntity)
			entityRoutes.DELETE("/:id", handlers.DeleteEntity)

			// Routes for attributes specific to an entity
			entityRoutes.POST("/:id/attributes", handlers.CreateAttribute) // Changed :entity_id to :id
			entityRoutes.GET("/:id/attributes", handlers.ListAttributes)   // Changed :entity_id to :id
		}

		// Standalone routes for attributes
		// For Get, Update, Delete of a specific attribute by its own ID
		attributeRoutes := v1.Group("/attributes")
		{
			attributeRoutes.GET("/:attribute_id", handlers.GetAttribute)
			attributeRoutes.PUT("/:attribute_id", handlers.UpdateAttribute)
			attributeRoutes.DELETE("/:attribute_id", handlers.DeleteAttribute)
		}
	}

	// Swagger documentation endpoint
	// use ginSwagger middleware to serve the API docs
	// The URL pointing to API definition
	url := ginSwagger.URL("/swagger/doc.json")
	router.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler, url))

	// Start server
	port := os.Getenv("PORT")
	if port == "" {
		port = "8080" // Default port
	}
	log.Printf("Server starting on port %s", port)
	if err := router.Run(":" + port); err != nil {
		log.Fatalf("Failed to run server: %v", err)
	}
}
